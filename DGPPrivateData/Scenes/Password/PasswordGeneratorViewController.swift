//
//  PasswordGeneratorViewController.swift
//  DGPPrivateData
//
//  Created by Daniel Gallego Peralta on 8/3/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol PasswordGeneratorDisplayLogic: class {
    func displayPassword(viewModel: PasswordGeneratorScene.Show.ViewModel)
    func displayToast(with message: String)
}

protocol PasswordGeneratorDelegate: AnyObject {
    func passwordGenerator(didUpdatePassword password: String)
}

class PasswordGeneratorViewController: UIViewController, PasswordGeneratorDisplayLogic, Storyboarded {
    var interactor: PasswordGeneratorBusinessLogic?
    var router: (NSObjectProtocol & PasswordGeneratorRoutingLogic & PasswordGeneratorDataPassing)?
    
    //MARK: - Instance properties
    
    weak var delegate: PasswordGeneratorViewController?
    
    var passwordView: PasswordGeneratorView! {
        guard isViewLoaded else {
            return nil
        }
        return (view as! PasswordGeneratorView)
    }
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = PasswordGeneratorInteractor()
        let presenter = PasswordGeneratorPresenter()
        let router = PasswordGeneratorRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupView()
        loadPassword()
    }
    
    private func setupView() {
        title = NSLocalizedString("Generate Password", comment: "title for generate password screen")
        passwordView.setup()
        passwordView.copyButton.addTarget(self, action: #selector(copyPassword), for: .touchUpInside)
        passwordView.generateButton.addTarget(self, action: #selector(generatePassword), for: .touchUpInside)
        passwordView.applyButton.addTarget(self, action: #selector(updatePassword), for: .touchUpInside)
        passwordView.passwordTextfield.addTarget(self, action: #selector(textfieldChangeValue(_:)), for: .editingChanged)
        passwordView.passwordTextfield.delegate = self
    }
    
    // MARK: Output
    
    func loadPassword() {
        let request = PasswordGeneratorScene.Show.Request()
        interactor?.doLoadPassword(request: request)
    }
    
    func loadPasswordEditing(_ text: String) {
        let request = PasswordGeneratorScene.UpdateText.Request(text: text)
        self.interactor?.doPasswordEditing(request: request)
    }

    
    //MARK: - Input
    
    func displayPassword(viewModel: PasswordGeneratorScene.Show.ViewModel) {
        passwordView.passwordTextfield.text = viewModel.password
    }
    
    func displayToast(with message: String) {
        view.makeToast(message, position: .center)
    }
    
    //MARK: - Actions
    
    @objc func copyPassword() {
        let text = passwordView.passwordTextfield.text!
        let request = PasswordGeneratorScene.Copy.Request(text: text)
        interactor?.doCopyPassword(request: request)
    }
    
    @objc func generatePassword() {
        let orderCase = PasswordGeneratorScene.PasswordGeneratorViewModel.Order.self
        
        var config = PasswordConfig()
        
        orderCase.allCases.forEach { order in
            let indexPath = IndexPath(row: order.rawValue, section: 0)
            
            switch order {
            case .total:
                let cell = self.tableView(passwordView.tableView, cellForRowAt: indexPath) as! ConfigSliderViewCell
                config.lowercaseCount = UInt(cell.slider.value)
            case .uppercase:
                let cell = self.tableView(passwordView.tableView, cellForRowAt: indexPath) as! ConfigSliderViewCell
                config.uppercaseCount = UInt(cell.slider.value)
            case .digit:
                let cell = self.tableView(passwordView.tableView, cellForRowAt: indexPath) as! ConfigStepperViewCell
                config.digitCount = UInt(cell.stepper.value)
            case .symbol:
                let cell = self.tableView(passwordView.tableView, cellForRowAt: indexPath) as! ConfigStepperViewCell
                config.symbolCount = UInt(cell.stepper.value)
            }
        }
        
        let request = PasswordGeneratorScene.New.Request(config: config)
        interactor?.doGeneratePassword(request: request)
    }
    
    @objc func updatePassword() {
        interactor?.doApplyChanges(request: PasswordGeneratorScene.ApplyChanges.Request())
        router?.routeToAddEditEntry()
    }
}

//MARK: - UITableView DataSource

extension PasswordGeneratorViewController: UITableViewDataSource {
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return interactor?.tableViewModel.numberOfRows ?? 0
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
        let row = indexPath.row
        let viewModel = interactor!.tableViewModel
        let cellModel = viewModel.cellsViewModels[row]
        
        let orderCase = PasswordGeneratorScene.PasswordGeneratorViewModel.Order.self
        switch row {
        case orderCase.total.rawValue, orderCase.uppercase.rawValue:
            let cell = tableView.dequeueReusableCell(withIdentifier: ConfigSliderViewCell.getIdentifier(), for: indexPath) as! ConfigSliderViewCell
            cell.viewModel = cellModel
            return cell
        case orderCase.digit.rawValue, orderCase.symbol.rawValue:
            let cell = tableView.dequeueReusableCell(withIdentifier: ConfigStepperViewCell.getIdentifier(), for: indexPath) as! ConfigStepperViewCell
            cell.viewModel = cellModel
            return cell
        default:
            break
        }
        return UITableViewCell()
    }
    
    func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        return passwordView.getHeaderTableView()
    }
    
    func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        return 20
    }
}

extension PasswordGeneratorViewController: UITableViewDelegate {
    
}

extension PasswordGeneratorViewController: UITextFieldDelegate {
    
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        textField.resignFirstResponder()
        return true
    }
    
    @objc func textfieldChangeValue(_ textField: UITextField) {
        self.loadPasswordEditing(textField.text!)
    }
    
    
}
