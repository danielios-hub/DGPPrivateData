//
//  AddEditEntryInteractor.swift
//  DGPPrivateData
//
//  Created by Daniel Gallego Peralta on 4/3/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol AddEditEntryBusinessLogic {
    func loadInitialData(request: AddEditEntryScene.Load.Request)
    func updatedCategory(request: AddEditEntryScene.UpdateCategory.Request)
    func updatePassword(request: AddEditEntryScene.UpdatePassword.Request)
    func copyText(request: AddEditEntryScene.Copy.Request)
    
    func setTitle(_ title: String)
    func setUsername(_ username: String)
    func setPassword(_ password: String)
    func setNotes(_ notes: String)
    func setSelectedIndex(_ index: Int)
    func toggleIsFavorite(request: AddEditEntryScene.UpdateFavorite.Request)
    func save(request: AddEditEntryScene.Save.Request)
}

protocol AddEditEntryDataStore {
    var entry: Entry? { get set }
    var isValid: Bool { get }
    var selectedIndex: Int { get set }
}

class AddEditEntryInteractor: AddEditEntryBusinessLogic, AddEditEntryDataStore {
    var presenter: AddEditEntryPresentationLogic?
    var worker: AddEditEntryWorker?
    
    var entry: Entry?
    var categories = [Category]()
    let masterService: MasterDataSource
    let passwordService: PasswordGenerator
    var selectedIndex: Int = 0
    
    init(service: MasterDataSource = ManagerMasterCoreData.shared,
         passwordService: PasswordGenerator = PasswordManager.shared) {
        self.masterService = service
        self.passwordService = passwordService
        self.worker = AddEditEntryWorker(service: service)
    }
    
    // MARK: Input
    
    func loadInitialData(request: AddEditEntryScene.Load.Request) {
        worker?.fetchCategories { [unowned self] categories in
            self.categories = categories
            self.selectedIndex = 0
            
            if let entry = self.entry {
                self.selectedIndex = self.categories.firstIndex(where: { entry.category.id == $0.id}) ?? 0
            } else {
                self.entry = Entry(category: self.categories[0])
                self.entry?.password = passwordService.generatePassword()
            }
            
            let response = AddEditEntryScene.Load.Response(categories: categories, selectedIndex: selectedIndex, entry: self.entry!)
            self.presenter?.presentInitialData(response: response)
        }
    }
    
    func save(request: AddEditEntryScene.Save.Request) {
        let result = worker!.save(entry: self.entry!)
        
        switch result {
        case .success(let entry):
            let response = AddEditEntryScene.Save.Response(entry: entry)
            self.presenter?.presentCreatedEntry(response: response)
        case .failure(let error):
            self.presenter?.presentError(error: error)
        }
    }
    
    func updatedCategory(request: AddEditEntryScene.UpdateCategory.Request) {
        let selectedCategory = categories[selectedIndex]
        let response = AddEditEntryScene.UpdateCategory.Response(category: selectedCategory)
        self.presenter?.presentSelectedCategory(response: response)
    }
    
    func updatePassword(request: AddEditEntryScene.UpdatePassword.Request) {
        let response = AddEditEntryScene.UpdatePassword.Response(password: request.password)
        presenter?.presentUpdatePassword(response: response)
    }
    
    func copyText(request: AddEditEntryScene.Copy.Request) {
        UIPasteboard.general.string = request.text
        presenter?.presentCopySuccess(response: AddEditEntryScene.Copy.Response())
    }
    
    //MARK: - Update fields
    
    func setTitle(_ title: String) {
        self.entry?.title = title
    }
    
    func setUsername(_ username: String) {
        self.entry?.username = username
    }
    
    func setPassword(_ password: String) {
        self.entry?.password = password
    }
    
    func setNotes(_ notes: String) {
        self.entry?.notes = notes
    }
    
    func setSelectedIndex(_ index: Int) {
        self.selectedIndex = index
        entry?.category = self.categories[index]
    }
    
    func toggleIsFavorite(request: AddEditEntryScene.UpdateFavorite.Request) {
        entry?.favorite.toggle()
        let response = AddEditEntryScene.UpdateFavorite.Response(isfavorite: entry?.favorite ?? false)
        presenter?.presentUpdateFavorite(response: response)
    }
    
    //MARK: - Utils
    
    var isValid:  Bool {
        return entry?.title.isNotEmpty == true
    }
    
}
