//
//  AddEditEntryViewController.swift
//  DGPPrivateData
//
//  Created by Daniel Gallego Peralta on 4/3/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import DGPExtensionCore

protocol AddEditEntryDisplayLogic: class {
    func displayInitialData(viewModel: AddEditEntryScene.Load.ViewModel)
    func displayEntryCreated(viewModel: AddEditEntryScene.Save.ViewModel)
    func displayEntryToEdit(viewModel: AddEditEntryScene.Edit.ViewModel)
    func displaySelectedCategory(viewModel: AddEditEntryScene.UpdateCategory.ViewModel)
    func displayUpdatePassword(viewModel: AddEditEntryScene.UpdatePassword.ViewModel)
    func displayUpdateFavorite(viewModel: AddEditEntryScene.UpdateFavorite.ViewModel)
    func displayError(viewModel: ErrorViewModel)
    func displayToast(with message: String)
}

class AddEditEntryViewController: UIViewController, AddEditEntryDisplayLogic, Storyboarded {
    var interactor: AddEditEntryBusinessLogic?
    var router: (NSObjectProtocol & AddEditEntryRoutingLogic & AddEditEntryDataPassing)?
    
    enum TagTextField: Int {
        case title = 1
        case username = 2
        case password = 3
        case notes = 4
    }
    
    //MARK: - Instance properties
    
    var textPlaceholder: String = NSLocalizedString("Add anything you want to save", comment: "placeholder for the notes textView")
    var viewModel: AddEditEntryScene.Load.ViewModel?
    
    var addEntryView: AddEditEntryView! {
        guard isViewLoaded else {
            return nil
        }
        return (view as! AddEditEntryView)
    }
    
    var textView: UITextView? {
        return addEntryView?.textViewNotes
    }
    
    var isSelectingCategory = false
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = AddEditEntryInteractor()
        let presenter = AddEditEntryPresenter()
        let router = AddEditEntryRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupView()
        loadInitialData()
        setPlaceholder()
        loadEditEntry()
        loadCategory()
    }
    
    private func setupView() {
        addEntryView.setup(target: self,
                           actionEdit: #selector(editPassword),
                           actionCopy: #selector(copyPassword))
        navigationItem.title = NSLocalizedString("Add an Item", comment: "title of the add entry screen")
        navigationItem.rightBarButtonItem = UIBarButtonItem(barButtonSystemItem: .done, target: self, action: #selector(saveEntry))
        addEntryView.viewTitle.textField.delegate = self
        addEntryView.viewUsername.textField.delegate = self
        addEntryView.viewPassword.textField.delegate = self
        addEntryView.textViewNotes.delegate = self
        isEnabledButton(true)
        
        addEntryView.buttonCategory.addTarget(self, action: #selector(selectCategory), for: .touchUpInside)
        addEntryView.favoriteButton.addTarget(self, action: #selector(toggleIsFavorite), for: .touchUpInside)
        
        configureTagView()
        
        addObserver(addEntryView.viewTitle.textField)
        addObserver(addEntryView.viewUsername.textField)
        addObserver(addEntryView.viewPassword.textField)
    }
    
    private func configureTagView() {
        addEntryView.viewTitle.textField.tag = TagTextField.title.rawValue
        addEntryView.viewUsername.textField.tag = TagTextField.username.rawValue
        addEntryView.viewPassword.textField.tag = TagTextField.password.rawValue
        addEntryView.textViewNotes.tag = TagTextField.notes.rawValue
    }
    
    // MARK: Output
    
    func loadInitialData() {
        let request = AddEditEntryScene.Load.Request()
        interactor?.loadInitialData(request: request)
    }
    
    func loadEditEntry() {
        let request = AddEditEntryScene.Edit.Request()
        interactor?.showEntryToEdit(request: request)
    }
    
    func loadCategory() {
        interactor?.updatedCategory(request: AddEditEntryScene.UpdateCategory.Request())
    }
    
    func loadPassword() {
        interactor?.updatePassword(request: AddEditEntryScene.UpdatePassword.Request())
    }
    
    //MARK: - Input
    
    func displayInitialData(viewModel: AddEditEntryScene.Load.ViewModel) {
        self.viewModel = viewModel
        addEntryView.updateCategory(name: viewModel.categoryText, icon: viewModel.categoryIcon)
        
        if interactor?.entryToEdit == nil {
            interactor?.password = PasswordManager.shared.generatePassword()
            interactor?.updatePassword(request: AddEditEntryScene.UpdatePassword.Request())
            addEntryView.viewPassword.textField.text = PasswordManager.shared.generatePassword()
        }
    }
    
    func displayEntryCreated(viewModel: AddEditEntryScene.Save.ViewModel) {
        router?.routeToListEntry()
    }
    
    func displayEntryToEdit(viewModel: AddEditEntryScene.Edit.ViewModel) {
        let formFields = viewModel.entryFormFields
        
        addEntryView.viewTitle.textField.text = formFields.title
        addEntryView.viewUsername.textField.text = formFields.username
        addEntryView.viewPassword.textField.text = formFields.password
        addEntryView.updateFavorite(selected: formFields.favorite)
        
        if !formFields.notes.isEmpty {
            addEntryView.textViewNotes.text = formFields.notes
            addEntryView.textViewNotes.textColor = .black
        }
    }
    
    func displaySelectedCategory(viewModel: AddEditEntryScene.UpdateCategory.ViewModel) {
        addEntryView.updateCategory(name: viewModel.categoryText, icon: viewModel.categoryIcon)
    }
    
    func displayUpdatePassword(viewModel: AddEditEntryScene.UpdatePassword.ViewModel) {
        addEntryView.viewPassword.textField.text = viewModel.password
    }
    
    func displayUpdateFavorite(viewModel: AddEditEntryScene.UpdateFavorite.ViewModel) {
        addEntryView.updateFavorite(selected: viewModel.isFavorite)
    }
    
    func displayError(viewModel: ErrorViewModel) {
        view.makeToast(viewModel.msg, position: .bottom)
    }
    
    func displayToast(with message: String) {
        view.makeToast(message, position: .center)
    }
    
    //MARK: - Actions
    
    @objc func saveEntry() {
        let title = addEntryView.viewTitle.textField.text!
        let username = addEntryView.viewUsername.textField.text!
        let password = addEntryView.viewPassword.textField.text!
        var notes = addEntryView.textViewNotes.text!
        let isFavorite = self.router?.dataStore?.isFavorite ?? false
        
        if notes == textPlaceholder {
            notes = ""
        }
        
        if let _ = interactor?.entryToEdit {
            let request = AddEditEntryScene.Save.Request(entryFormFields: AddEditEntryScene.EntryFormFields(title: title,
                                                                                                                   username: username,
                                                                                                                   password: password,
                                                                                                                   notes: notes,
                                                                                                                   favorite: isFavorite))
            interactor?.updateEntry(request: request)
        } else {
            let request = AddEditEntryScene.Save.Request(entryFormFields: AddEditEntryScene.EntryFormFields(title: title,
                                                                                                            username: username,
                                                                                                            password: password,
                                                                                                            notes: notes,
                                                                                                            favorite: isFavorite)
                                                        )
            interactor?.saveEntry(request: request)
        }
        
    }
    
    @objc func selectCategory() {
        if isSelectingCategory {
            view.endEditing(false)
            return
        }
        
        isSelectingCategory = true
        let picker = DGPPickerView(frame: .zero, viewModel: self)
        picker.show(in: view)
    }
    
    @objc func editPassword() {
        interactor?.password = addEntryView.viewPassword.textField.text!
        router?.routeToPasswordGenerator()
    }
    
    @objc func copyPassword() {
        let request = AddEditEntryScene.Copy.Request(text: addEntryView.viewPassword.textField.text!)
        interactor?.copyText(request: request)
    }
    
    @objc func toggleIsFavorite() {
        let request = AddEditEntryScene.UpdateFavorite.Request()
        interactor?.toggleIsFavorite(request: request)
    }
    
    //MARK: - Utils
    
    func isEnabledButton(_ enabled: Bool) {
        navigationItem.rightBarButtonItem?.isEnabled = enabled
    }
    
    func updatedText(_ text: String, tag: Int) {
        switch tag {
        case TagTextField.title.rawValue:
            interactor?.title = text
        case TagTextField.username.rawValue:
            interactor?.username = text
        case TagTextField.password.rawValue:
            interactor?.password = text
        case TagTextField.notes.rawValue:
            interactor?.notes = text
        default: break
        }
    }
    
    func isValid() -> Bool {
        return self.interactor!.isValid
    }
}

//MARK: - UITextField Delegate

extension AddEditEntryViewController: UITextFieldDelegate {
    
    func addObserver(_ textField: UITextField) {
        textField.addTarget(self, action: #selector(textFieldDidChange(_:)), for: .editingChanged)
        textField.autocorrectionType = .no
    }
    
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        textField.resignFirstResponder()
        return true
    }
    
    func textFieldShouldEndEditing(_ textField: UITextField) -> Bool {
        return true
    }
    
    @objc func textFieldDidChange(_ textField: UITextField) {
        updatedText(textField.text!, tag: textField.tag)
        checkEnabledPublish()
    }
}

//MARK: - UITextView Delegate

extension AddEditEntryViewController: UITextViewDelegate, UITextViewPlaceholderProtocol {
    
    func textView(_ textView: UITextView, shouldChangeTextIn range: NSRange, replacementText text: String) -> Bool {
        let currentText:String = textView.text
        let updatedText = (currentText as NSString).replacingCharacters(in: range, with: text)

        if updatedText.isEmpty {
            setPlaceholder()
            textView.selectedTextRange = textView.textRange(from: textView.beginningOfDocument, to: textView.beginningOfDocument)
            updateViewModelText(textView: textView)
            checkEnabledPublish()
        }

         else if textView.textColor == colorPlaceholder && !text.isEmpty {
            textView.textColor = UIColor.black
            textView.text = text
            
            updateViewModelText(textView: textView)
            checkEnabledPublish()
        } else {
            return true
        }

        return false
    }
    
    func textViewDidChangeSelection(_ textView: UITextView) {
        if self.view.window != nil {
            if textView.textColor == colorPlaceholder {
                textView.selectedTextRange = textView.textRange(from: textView.beginningOfDocument, to: textView.beginningOfDocument)
            }
        }
    }
    
    func textViewDidChange(_ textView: UITextView) {
        checkEnabledPublish()
        updateViewModelText(textView: textView)
    }
    
    
    func textViewDidEndEditing(_ textView: UITextView) {
        textView.text = textView.text.trimming()
    }
    
    func updateViewModelText(textView: UITextView) {
        updatedText(textView.text! == textPlaceholder ? "" : textView.text!, tag: textView.tag)
    }
}

//MARK: - DGPPickerView Delegate

extension AddEditEntryViewController: DGPPickerViewModel {
    var selectedIndex: Int {
        return interactor?.selectedIndex ?? -1
    }
    
    public func numberOfComponents() -> Int {
        return 1
    }
    
    public func numberOfItems() -> Int {
        return viewModel?.categories.count ?? 0
    }
    
    public func titleOfItem(with index: Int, component: Int) -> String {
        return viewModel?.categories[index].name ?? ""
    }
    
    public func didSelectItem(with index: Int, component: Int) -> Void {
        interactor?.selectedIndex = index
        loadCategory()
    }
    
    public func finishDGPPickerView() {
        isSelectingCategory = false
    }
    
}

//MARK: - AddEditEntryViewController

extension AddEditEntryViewController: PasswordGeneratorDelegate {
    
    func passwordGenerator(didUpdatePassword password: String) {
        self.interactor?.updateNewPassword(request: AddEditEntryScene.UpdateNewPassword.Request(password: password))
        self.loadPassword()
    }
}


