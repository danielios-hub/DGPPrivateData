//
//  AuthenticationWorker.swift
//  DGPPrivateData
//
//  Created by Daniel Gallego Peralta on 5/3/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import LocalAuthentication

class AuthenticationWorker {
    
    func doAuthentication(completionHandler: @escaping (Result<Bool, AuthenticationScene.AuthenticationError>) -> Void) {
        let context = LAContext()
        context.localizedCancelTitle = NSLocalizedString("Cancel", comment: "cancel text for buttons")
        var error: NSError?
        let policy : LAPolicy = .deviceOwnerAuthenticationWithBiometrics
        if context.canEvaluatePolicy(policy, error: &error) {
            let reason = NSLocalizedString("You need to identify to access tour database", comment: "description faceID authentication")
            context.evaluatePolicy(policy, localizedReason: reason) { (result, error) in
                if result {
                    completionHandler(.success(true))
                } else {
                    let msgError = NSLocalizedString("Failed to authenticate", comment: "Wrong authentication message")
                    completionHandler(.failure(AuthenticationScene.AuthenticationError.failedAuth(msgError)))
                }
            }
        } else {
            let msgError = NSLocalizedString("No biometrics device available", comment: "error description when the device has no biometrics device available")
            completionHandler(.failure(AuthenticationScene.AuthenticationError.noDevice(msgError)))
        }
    }
    
    func isBiometricsAvailable() -> Bool {
        var error: NSError?
        let policy : LAPolicy = .deviceOwnerAuthenticationWithBiometrics
        
        let context = LAContext()
        if context.canEvaluatePolicy(policy, error: &error) {
            return true
        } else {
            return false
        }
        
    }
}
