//
//  FilterViewController.swift
//  DGPPrivateData
//
//  Created by Daniel Gallego Peralta on 13/3/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol FilterDisplayLogic: class {
    func displayFilters(viewModel: FilterScene.Load.ViewModel)
}

class FilterViewController: UIViewController, FilterDisplayLogic {
    var interactor: FilterBusinessLogic?
    var router: (NSObjectProtocol & FilterRoutingLogic & FilterDataPassing)?
    
    var filterView: FilterView! {
        guard isViewLoaded else {
            return nil
        }
        return (view as! FilterView)
    }
    
    struct TableViewModel {
        
        enum Section: Int {
            case categories = 0
            case orders = 1
        }
        
        var numberOfSection: Int = 2
        var filterCellViewModel: [FilterCellViewModel] = []
        var orderCellViewModel: [OrderCellViewModel] = []
        
        init() { }
        
        init(filtersModel: [FilterCellViewModel], orderModels: [OrderCellViewModel]) {
            self.filterCellViewModel = filtersModel
            self.orderCellViewModel = orderModels
        }
        
        func rows(for section: Int) -> Int {
            section == 0 ? filterCellViewModel.count : section == 1 ? orderCellViewModel.count : 0
        }
        
        func viewModel(forSection section: Int, row: Int) -> FilterOptionViewModel? {
            return section == 0 ? filterCellViewModel[row] : section == 1 ? orderCellViewModel[row] : nil
        }
        
    }
    
    var tableViewModel = TableViewModel()
    
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = FilterInteractor()
        let presenter = FilterPresenter()
        let router = FilterRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupView()
        loadFilters()
    }
    
    override func loadView() {
        view = FilterView()
    }
    
    private func setupView() {
        navigationItem.title = NSLocalizedString("Filters", comment: "Filters title")
        filterView.collectionView.dataSource = self
        filterView.collectionView.delegate = self
    }
    
    // MARK: Output
    
    func loadFilters() {
        let request = FilterScene.Load.Request()
        interactor?.doLoadFilters(request: request)
    }
    
    func selectFilter(index: Int) {
        interactor?.doSelectFilter(request: FilterScene.ToggleFilter.Request(index: index))
    }
    
    //MARK: - Input
    
    func displayFilters(viewModel: FilterScene.Load.ViewModel) {
        tableViewModel = TableViewModel(
            filtersModel: viewModel.cellsCategoryModel,
            orderModels: viewModel.cellsOrderModel)
        reloadCollectionView()
        
        for (index, model) in viewModel.cellsCategoryModel.enumerated() {
            if model.state {
                self.filterView.collectionView.selectItem(
                    at: IndexPath(item: index, section: 0),
                    animated: false,
                    scrollPosition: .top)
            }
        }
    }
    
    //MARK: - Utils
    
    func reloadCollectionView() {
        filterView.collectionView.reloadData()
    }
    
}

//MARK: - UICollectionView DataSource

extension FilterViewController: UICollectionViewDataSource {
    
    func numberOfSections(in collectionView: UICollectionView) -> Int {
        tableViewModel.numberOfSection
    }
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        tableViewModel.rows(for: section)
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
    
        switch indexPath.section {
        case TableViewModel.Section.categories.rawValue:
            let cell = collectionView.dequeueCell(FilterCellView.self, indexPath: indexPath)
            cell.viewModel = tableViewModel.viewModel(
                forSection: indexPath.section,
                row: indexPath.item)
            return cell
        case TableViewModel.Section.orders.rawValue:
            let cell = collectionView.dequeueCell(OrderFilterViewCell.self, indexPath: indexPath)
            cell.viewModel = tableViewModel.viewModel(
                forSection: indexPath.section,
                row: indexPath.item)
            cell.delegate = self
            return cell
        default:
            return UICollectionViewCell()
        }
        
        
    }
}

//MARK: - UICollectionView DelegateFlowLayout

extension FilterViewController: UICollectionViewDelegateFlowLayout {
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        self.collectionViewHelper(selectedIndexPath: indexPath)
    }
    
    func collectionView(_ collectionView: UICollectionView, didDeselectItemAt indexPath: IndexPath) {
        self.collectionViewHelper(selectedIndexPath: indexPath)
    }
    
    func collectionViewHelper(selectedIndexPath indexPath: IndexPath) {
        switch indexPath.section {
        case TableViewModel.Section.categories.rawValue:
            self.selectFilter(index: indexPath.item)
        default:
            break
        }
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        switch indexPath.section {
        case TableViewModel.Section.categories.rawValue:
            return FilterCellView.ViewTraits.cellSize
        case TableViewModel.Section.orders.rawValue:
            return CGSize(width: collectionView.frame.width, height: OrderFilterViewCell.ViewTraits.heightCell)
        default: return .zero
        }
        
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumLineSpacingForSectionAt section: Int) -> CGFloat {
        return 30
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, insetForSectionAt section: Int) -> UIEdgeInsets {
        let padding: CGFloat = section == 0 ? 15 : 30
        return UIEdgeInsets(top: padding, left: padding, bottom: 0, right: padding)
    }
}

//MARK: - CollectionCell Delegate

extension FilterViewController: OrderFilterViewCellDelegate {
    
    func orderFilterViewCellDelegateSaveOrderFilters(controller: OrderFilterViewCell) {
        interactor?.doSaveOrderFilters(request: FilterScene.OrderFilters.Request())
    }
    
    
    
}


