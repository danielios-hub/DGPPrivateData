//
//  FilterInteractor.swift
//  DGPPrivateData
//
//  Created by Daniel Gallego Peralta on 13/3/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol FilterBusinessLogic {
    func doLoadFilters(request: FilterScene.Load.Request)
    func doSelectFilter(request: FilterScene.ToggleFilter.Request)
    func doSaveOrderFilters(request: FilterScene.OrderFilters.Request)
    var filters: [Filter] { get }
}

protocol FilterDataStore {
    var filters: [Filter] { get set }
}

class FilterInteractor: FilterBusinessLogic, FilterDataStore {
    var presenter: FilterPresentationLogic?
    var filters: [Filter] = []
    var orderFilters: [Filter] = []
    
    var storeDataSource: PreferencesService = UserDefaultPreferencesService(defaults: UserDefaults.standard)
    lazy var worker = FilterWorker(dataStore: storeDataSource)
    
    func doLoadFilters(request: FilterScene.Load.Request) {
        let (categories, orders) = worker.doLoadFilters()
        filters = categories
        orderFilters = orders
        let response = FilterScene.Load.Response(categoryFilters: categories, orderFilters: orders)
        presenter?.presentFilters(response: response)
    }
    
    func doSelectFilter(request: FilterScene.ToggleFilter.Request) {
        let currentValue = filters[request.index].state
        filters[request.index].state = !currentValue
        worker.saveFilters(filter: filters)
    }
    
    func doSaveOrderFilters(request: FilterScene.OrderFilters.Request) {
        worker.saveOrderFilters(filters: orderFilters)
    }
    
    
}
