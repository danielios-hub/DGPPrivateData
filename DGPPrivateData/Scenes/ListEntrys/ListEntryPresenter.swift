//
//  ListEntryPresenter.swift
//  DGPPrivateData
//
//  Created by Daniel Gallego Peralta on 4/3/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ListEntryPresentationLogic {
    func presentInitialData(response: ListEntryScene.Load.Response)
}

public class ListEntryPresenter: ListEntryPresentationLogic {
    weak var viewController: ListEntryDisplayLogic?
    
    public init() {}
    
     func presentInitialData(response: ListEntryScene.Load.Response) {
        var sections: [ListEntrySection] = []
        if response.isGroupedCategories {
            let categories =  getCategories(from: response.entries)
            
            for category in categories {
                let entries = response.entries.filter { $0.category == category}
                let section = createSection(name: category.name, entries: entries)
                sections.append(section)
            }
        } else if response.entries.isNotEmpty {
            sections = [createSection(name: "Alls", entries: response.entries)]
        }
        
        let viewModel = ListEntryScene.Load.ViewModel(sections: sections)
        viewController?.displayListEntries(viewModel: viewModel)
    }
    
    //MARK: - Helpers
    
    func createSection(name: String, icon: String = "", entries: [Entry]) -> ListEntrySection {
        let cellsViewModel = getCellsViewModels(from: entries)
        return ListEntrySection(name: name, icon: icon, cellsModel: cellsViewModel)
    }
    
    func getCellsViewModels(from entries: [Entry]) -> [ListEntryCellViewModel] {
        let cellsViewModel: [ListEntryCellViewModel] = entries.map { model in
            let category = model.category.name
            return ListEntryCellViewModel(title: model.title, icon: model.icon, categoryDescription: category)
        }
        
        return cellsViewModel
    }
    
    func getCategories(from entries: [Entry]) -> [Category] {
        return entries.reduce(into: [Category]()) { (acc, new) in
            if !acc.contains(new.category) {
                acc.append(new.category)
            }
        }
    }
}
