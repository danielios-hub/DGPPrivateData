//
//  ListEntryViewController.swift
//  DGPPrivateData
//
//  Created by Daniel Gallego Peralta on 4/3/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ListEntryDisplayLogic: class {
    func displayListEntrys(viewModel: ListEntryScene.Load.ViewModel)
}

class ListEntryViewController: UIViewController, ListEntryDisplayLogic, Storyboarded {
    
    var interactor: ListEntryBusinessLogic?
    var router: (NSObjectProtocol & ListEntryRoutingLogic & ListEntryDataPassing)?
    
    private var cellViewModels: [ListEntryCellViewModel] = []
    
    var listView: ListEntryView! {
        guard isViewLoaded else {
            return nil
        }
        return (view as! ListEntryView)
    }
    
    var selectedRow: Int? {
        return listView.tableView.indexPathForSelectedRow?.row
    }
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = ListEntryInteractor()
        let presenter = ListEntryPresenter()
        let router = ListEntryRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        setupView()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        loadInitialData()
    }
    
    func setupView() {
        self.title = NSLocalizedString("Entrys", comment: "Title entry list")
        let barButton = UIBarButtonItem(barButtonSystemItem: .add, target: self, action: #selector(createEntry))
        navigationItem.leftBarButtonItem = UIBarButtonItem(image: UIImage(symbol: .lineHorizontal3DecreaseCircleFill),
                                                           style: .plain,
                                                           target: self,
                                                           action: #selector(filterEntrys))
        navigationItem.rightBarButtonItem = barButton
        navigationItem.hidesBackButton = true 
        navigationController?.navigationBar.barTintColor = UIColor.forgottenPurple
        navigationController?.navigationBar.tintColor = .white
        navigationController?.navigationBar.titleTextAttributes = [
            NSAttributedString.Key.foregroundColor: UIColor.white
        ]
        listView.setup()
        
    }
    
    // MARK: Request
    
    func loadInitialData() {
        let request = ListEntryScene.Load.Request()
        interactor?.doLoadInitialData(request: request)
    }
    
    func displayListEntrys(viewModel: ListEntryScene.Load.ViewModel) {
        self.cellViewModels = viewModel.cellsModel
        self.listView.tableView.reloadData()
    }
    
    //MARK: - Actions
    
    @objc func createEntry() {
        router?.routeToAddEntry()
    }
    
    @objc func filterEntrys() {
        router?.routeToFilters()
    }
}

extension ListEntryViewController: UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return cellViewModels.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: ListEntryViewCell.getIdentifier(), for: indexPath) as! ListEntryViewCell
        cell.viewModel = cellViewModels[indexPath.row]
        return cell
    }
    
    
}

extension ListEntryViewController: UITableViewDelegate {
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        router?.routeToEditEntry()
    }
}
